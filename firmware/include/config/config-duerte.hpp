/*
 * This file is generated by GenerateHardwareConfig.js and ignored in git. Any changes you apply will *not* persist.
 * 
 * config.hpp contains hardware specific data like the pantograph size and the I/O pins.
 * It is generated by GenerateHardwareConfig.js using the hardware specifications found in the Hardware dir.
 * 
 * In order to avoid additional checks, unused data is rerouted to invalid pins instead of filtering all calls.
 * For the current configuration, this dummy pin is 40. Any assignments to this pin will be ignored, all reads from this pin will return 0.
 */

#pragma once

#include <Arduino.h>

const uint8_t configHash[] = {0xA6, 0xD7, 0x23, 0xF5, 0x12, 0xFF, 0xD0, 0x0C, 0xF6, 0x18, 0x3C, 0x6B, 0x5E, 0x36, 0x0F, 0x2B};
const float opMinDist = 65,
            opMaxDist = 210,
            opAngle = 2.2;
extern float forceFactor;
const uint8_t pantoCount = 2;
const uint8_t dummyPin = 40;
#define LINKAGE_ENCODER_USE_SPI
const uint32_t numberOfSpiEncoders = 4;
const float linkageBaseX[] = {
    -23.7, 61.1, 0, -61.1, 23.7, 0
};
const float linkageBaseY[] = {
    0, 0, 0, 0, 0, 0
};
const float linkageInnerLength[] = {
    95.07, 57.71, 0, 57.71, 95.07, 0
};
const float linkageOuterLength[] = {
    119.79, 119.79, 0, 119.79, 119.79, 0
};
const uint8_t linkageHandleMount[] = {
    0, 0, 0, 0, 0, 0
};
const float motorPowerLimit[] = {
    0.6, 0.6, 0.2, 0.6, 0.6, 0.2
};
extern float pidFactor[6][3];
const float forceP = 0.375; //changed from 0.375
const float forceI = 0.0;
const float forceD = 0.0;
const float forcePidFactor[2][3] = {
  {forceP, forceI, forceD}, {forceP, forceI, forceD}
};
const uint8_t motorPwmPin[] = {
    40, 40, 25, 40, 40, 23 // 40,40,25,40,40,23
};
const uint8_t motorPwmPinForwards[] = { //motor orientation matters
    16, 2, 40, 22, 19, 40
};

const uint8_t motorPwmPinBackwards[] = {
    4, 17, 40, 21, 18, 40 // 2 used to be 5 without modification
};
const uint8_t motorDirAPin[] = {
    40, 40, 32, 40, 40, 26
};
const uint8_t motorDirBPin[] = {
    40, 40, 40, 40, 40, 40
};
const bool motorFlipped[] = {
    false, false, false, false, false, false
};
const uint8_t encoderAPin[] = {
    40, 40, 35, 40, 40, 36
};
const uint8_t encoderBPin[] = {
    40, 40, 34, 40, 40, 39
};
const uint8_t encoderIndexPin[] = {
    40, 40, 40, 40, 40, 40
};
const uint32_t encoderSteps[] = {
    16384, 16384, 136, 16384, 16384, 136
};
const uint32_t encoderSpiIndex[] = {

    3, 2, 4294967295, 0, 1, 4294967295 
};
const float encoderFlipped[] = {
    1, 1, 1, -1, -1, 1
};
const float setupAngle[] = {
    -0.4806, -0.0194, 0, -0.4806, -0.0194, 0
};
constexpr float rangeMinX = -175;
constexpr float rangeMinY = -205;
constexpr float rangeMaxX = 175;
constexpr float rangeMaxY = 5;
constexpr uint32_t hashtableMaxMemory = 100000;
constexpr uint32_t hashtableUsedMemory = 98280;
constexpr uint32_t hashtableMaxCells = 8333;
constexpr uint32_t hashtableNumCells = 8190;
constexpr uint32_t hashtableStepsX = 117;
constexpr uint32_t hashtableStepsY = 70;
constexpr double hashtableStepSizeX = 2.9914529914529915;
constexpr double hashtableStepSizeY = 3;
const uint32_t obstacleChangesPerFrame = 1;