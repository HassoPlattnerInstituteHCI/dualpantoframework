/*
 * This file is generated by GenerateHardwareConfig.js and ignored in git. Any changes you apply will *not* persist.
 * 
 * config.hpp contains hardware specific data like the pantograph size and the I/O pins.
 * It is generated by GenerateHardwareConfig.js using the hardware specifications found in the Hardware dir.
 * 
 * In order to avoid additional checks, unused data is rerouted to invalid pins instead of filtering all calls.
 * For the current configuration, this dummy pin is 40. Any assignments to this pin will be ignored, all reads from this pin will return 0.
 */

#pragma once

#include <Arduino.h>

const uint8_t configHash[] = {0x01, 0xA8, 0xCD, 0xD5, 0x94, 0xE1, 0x6A, 0x8F, 0x4E, 0x00, 0x19, 0x27, 0xF7, 0x60, 0x9A, 0x30};
const float opMinDist = 65,
            opMaxDist = 210,
            opAngle = 2.2;
extern float forceFactor;
const uint8_t pantoCount = 2;
const uint8_t dummyPin = 40;
#define LINKAGE_ENCODER_USE_SPI
const uint32_t numberOfSpiEncoders = 4;
const float linkageBaseX[] = {
    -22, 22, 0, -22, 22, 0
};
const float linkageBaseY[] = {
    0, 0, 0, 0, 0, 0
};
const float linkageInnerLength[] = {
    84.5, 84.5, 0, 84.5, 84.5, 0
};
const float linkageOuterLength[] = {
    114, 114, 0, 114, 114, 0
};
const uint8_t linkageHandleMount[] = {
    0, 0, 0, 0, 0, 0
};
const float motorPowerLimit[] = {
    1, 1, 0.2, 1, 1, 0.7
};
const float motor_powerLimitForce[] = {
  0, 0, 0, 0, 0, 0
};
extern float pidFactor[6][3];
const float forceP = 0.375;
const float forceI = 0;
const float forceD = 0;
const float forcePidFactor[2][3] = {
  {forceP, forceI, forceD}, {forceP, forceI, forceD}
};
const uint8_t motorPwmPin[] = {
    21, 18, 25, 4, 17, 23
};
const uint8_t motorPwmPinForwards[] = {
    40, 40, 40, 40, 40, 40
};
const uint8_t motorPwmPinBackwards[] = {
    40, 40, 40, 40, 40, 40
};
const uint8_t motorDirAPin[] = {
    22, 19, 32, 16, 5, 26
};
const uint8_t motorDirBPin[] = {
    40, 40, 33, 40, 40, 27
};
const bool motorFlipped[] = {
    true, true, false, true, true, false
};
const uint8_t encoderAPin[] = {
    40, 40, 35, 40, 40, 36
};
const uint8_t encoderBPin[] = {
    40, 40, 34, 40, 40, 39
};
const uint8_t encoderIndexPin[] = {
    40, 40, 40, 40, 40, 40
};
const uint32_t encoderSteps[] = {
    16384, 16384, 512, 16384, 16384, 15360
};
const uint32_t encoderSpiIndex[] = {
    3, 2, 4294967295, 0, 1, 4294967295
};
const float encoderFlipped[] = {
    -1, -1, 1, -1, -1, 1
};
const float setupAngle[] = {
    -0.4806, -0.0194, 0, -0.4806, -0.0194, 0
};
constexpr float rangeMinX = -175;
constexpr float rangeMinY = -205;
constexpr float rangeMaxX = 175;
constexpr float rangeMaxY = 5;
constexpr uint32_t hashtableMaxMemory = 100000;
constexpr uint32_t hashtableUsedMemory = 98280;
constexpr uint32_t hashtableMaxCells = 8333;
constexpr uint32_t hashtableNumCells = 8190;
constexpr uint32_t hashtableStepsX = 117;
constexpr uint32_t hashtableStepsY = 70;
constexpr double hashtableStepSizeX = 2.9914529914529915;
constexpr double hashtableStepSizeY = 3;
const uint32_t obstacleChangesPerFrame = 1;